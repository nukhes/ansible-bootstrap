---
- hosts: local
  become: yes
  vars:
    base_packages:
      - git
      - curl
      - wget
      - htop
      - stow
      - fish-shell
      - xsetroot
      - xset
      - dex
      - redshift
    apps:
      - chromium
      - vscode
      - feh
      - mpv
      - thunar
      - telegram-desktop
      - flameshot
      - kitty
      - xorg
      - i3
      - polybar
      - rofi
      - newsboat
      - docker

    dotfiles_repo: "https://github.com/nukhes/dotfiles.git"
    dotfiles_dir: "{{ ansible_env.HOME }}/dotfiles"

  tasks:
    - name: Update System
      command: xbps-install -Syu
      args:
        creates: /var/lib/xbps/updates_complete # crude idempotency marker

    - name: Check if package is installed
      command: xbps-query -R {{ item }}
      register: pkg_check
      ignore_errors: yes
      changed_when: false
      loop: "{{ base_packages + apps }}"
      loop_control:
        loop_var: item

    - name: Install packages
      command: xbps-install -y {{ item.item }}
      when: item.rc != 0
      loop: "{{ pkg_check.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Clone dotfiles
      become: false
      git:
        repo: "{{ dotfiles_repo }}"
        dest: "{{ dotfiles_dir }}"
        version: main
        update: yes

    - name: Apply dotfiles with stow
      become: false
      shell: |
        cd "{{ dotfiles_dir }}"
        stow --adopt --override='.*' .
      args:
        executable: /bin/bash
      when: "'stow' not in ansible_facts.packages or ansible_facts.packages['stow']['version'] is defined"

    - name: Create the main directories in /home
      file: 
        path: "{{ item }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: 0755
      loop: 
        - "/home/{{ username }}/code"
        - "/home/{{ username }}/docs"
        - "/home/{{ username }}/dl"
        - "/home/{{ username }}/media"

    - name: Install Pixi
      become: false
      shell: |
        curl -fsSL https://pixi.sh/install.sh | sh
      args:
        executable: /bin/bash
      creates: "{{ ansible_env.HOME }}/.pixi/bin/pixi"

    - name: Install Pixi devtools
      become: false
      shell: |
        export PATH="$HOME/.pixi/bin:$PATH"
        pixi global install eza nodejs pnpm
      args:
        executable: /bin/bash
      when: not (ansible_env.HOME + '/.pixi/bin/eza') is exists

    - name: Enable Docker Service
      file:
        src: /etc/sv/docker
        dest: /var/service/docker
        state: link
      when: not (ansible_stat.stat.exists)
      vars:
        ansible_stat: "{{ lookup('ansible.builtin.stat', '/var/service/docker', get_attributes=True) }}"

    - name: Add user to docker group
      user:
        name: "{{ ansible_user_id }}"
        groups: docker
        append: yes
      when: "'docker' not in ansible_facts.user_gid"

    - name: Install Flatpak
      command: xbps-install -y flatpak

    - name: Ensure Flatpak user directory exists
      become: false
      file:
        path: "{{ ansible_env.HOME }}/.local/share/flatpak"
        state: directory
        mode: '0755'

    - name: Add Flathub remote for user
      become: false
      shell: |
        flatpak remote-add --if-not-exists --user flathub https://flathub.org/repo/flathub.flatpakrepo
      args:
        executable: /bin/bash

    - name: Install Flatpak apps only if missing
      become: false
      shell: |
        for app in \
          com.heroicgameslauncher.hlg \
          com.valvesoftware.Steam \
          com.usebottles.bottles \
          com.github.pinapp.Pin \
          com.github.tchx84.Flatseal; do
            flatpak info --user $app || flatpak install -y --user flathub $app
        done
      args:
        executable: /bin/bash

    - name: Install Bluetooth packages
      command: xbps-install -y bluez bluez-alsa pulseaudio-bluetooth
      args:
        creates: /usr/bin/bluetoothctl

    - name: Enable Bluetooth service
      file:
        src: /etc/sv/bluetoothd
        dest: /var/service/bluetoothd
        state: link
      when: not (ansible_stat_bt.stat.exists)
      vars:
        ansible_stat_bt: "{{ lookup('ansible.builtin.stat', '/var/service/bluetoothd', get_attributes=True) }}"

    - name: Add user to bluetooth group
      user:
        name: "{{ ansible_user_id }}"
        groups: bluetooth
        append: yes
